{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","results","setResults","isLoading","setIsLoading","numResults","setNumResults","highlightIndex","setHighlightIndex","contentToShow","setContentToShow","latestQueryRef","useRef","lastNumRef","numInputRef","getSearchSuggestions","searchTerm","a","current","endpointUrl","fetch","request","json","data","useDebouncedCallback","getSearchSuggestionsDebounced","onKeyDownHandler","useCallback","event","target","key","prevState","length","getFileContent","filename","text","useEffect","document","addEventListener","removeEventListener","className","onChange","value","disabled","min","ref","type","onBlur","numResultsInt","parseInt","isNaN","map","result","i","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1700fe3e.chunk.js","sourcesContent":["import React, { useState, useRef, useEffect, useCallback } from 'react';\nimport { useDebouncedCallback } from 'use-debounce';\nimport './App.css';\n\nconst DEFAULT_NUM_RESULTS = 10;\n\nconst App = () => {\n  const [results, setResults] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [numResults, setNumResults] = useState(DEFAULT_NUM_RESULTS);\n  const [highlightIndex, setHighlightIndex] = useState(-1);\n  const [contentToShow, setContentToShow] = useState(null);\n\n  //we use this ref to keep track of the last searched query, in case a previous async call took longer\n  //now it wont override the correct results\n  const latestQueryRef = useRef('');\n\n  //use this to keep track of last valid number if user inputs an invalid number so we can fall back\n  const lastNumRef = useRef(DEFAULT_NUM_RESULTS);\n\n  const numInputRef = useRef(null);\n\n  const queryOnChangeHandler = (event) => {\n    const searchTerm = event.target.value;\n    getSearchSuggestionsDebounced(searchTerm);\n  };\n\n  const getSearchSuggestions = async (searchTerm) => {\n    latestQueryRef.current = searchTerm;\n    const endpointUrl = `http://vertauiinterview3zcck5-env.c3jmih47du.us-east-1.elasticbeanstalk.com/search?count=${numResults}&prefix=${searchTerm}&randomDelay=true`;\n    setIsLoading(true);\n    const request = await fetch(endpointUrl);\n    const data = await request.json();\n\n    if (latestQueryRef.current === searchTerm) {\n      setResults(data.results);\n      setHighlightIndex(-1);\n      setIsLoading(false);\n    }\n  };\n\n  const [getSearchSuggestionsDebounced] = useDebouncedCallback(\n    getSearchSuggestions,\n    250\n  );\n\n  const numResultOnChangeHandler = (event) => {\n    const value = event.target.value;\n    setNumResults(value);\n  };\n\n  //we do some checks on blur to make sure value is valid (e.g. greater than 0, no 'e' strings, float to ints)\n  const numResultOnBlurHandler = () => {\n    const numResultsInt = parseInt(numResults, 10);\n\n    if (isNaN(numResultsInt)) {\n      setNumResults(lastNumRef.current);\n    } else if (numResultsInt < 1) {\n      setNumResults(1);\n      lastNumRef.current = 1;\n    } else {\n      lastNumRef.current = numResultsInt;\n      setNumResults(numResultsInt);\n    }\n  };\n\n  const onKeyDownHandler = useCallback(\n    (event) => {\n      if (contentToShow === null) {\n        //ignore up and down if focused on num input because those are valids controls\n        if (event.target !== numInputRef.current) {\n          if (event.key === 'ArrowDown') {\n            setHighlightIndex((prevState) => {\n              if (prevState < results.length - 1 && results.length > 0)\n                return prevState + 1;\n              else return 0;\n            });\n          }\n          if (event.key === 'ArrowUp') {\n            setHighlightIndex((prevState) => {\n              if (prevState > 0) return prevState - 1;\n              else return results.length - 1;\n            });\n          }\n        }\n        if (event.key === 'Enter') {\n          if (results[highlightIndex]) getFileContent(results[highlightIndex]);\n        }\n      } else {\n        if (event.key === 'Backspace') {\n          setContentToShow(null);\n        }\n      }\n    },\n    [highlightIndex, results, contentToShow]\n  );\n\n  const getFileContent = async (filename) => {\n    const endpointUrl = `http://vertauiinterview3zcck5-env.c3jmih47du.us-east-1.elasticbeanstalk.com/static/${filename}`;\n    const request = await fetch(endpointUrl);\n    const text = await request.text();\n    setContentToShow(text);\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', onKeyDownHandler);\n\n    return () => {\n      document.removeEventListener('keydown', onKeyDownHandler);\n    };\n  }, [onKeyDownHandler]);\n\n  return (\n    <div className='App'>\n      <div>Verta Assignment</div>\n      <div>\n        search query:{' '}\n        <input\n          className='queryInput'\n          onChange={queryOnChangeHandler}\n          disabled={contentToShow !== null}\n        />\n      </div>\n      <div>\n        num results:\n        <input\n          min={1}\n          disabled={contentToShow !== null}\n          ref={numInputRef}\n          className='numInput'\n          type='number'\n          value={numResults}\n          onChange={numResultOnChangeHandler}\n          onBlur={numResultOnBlurHandler}\n        />\n      </div>\n\n      {isLoading && <div className='spinner' />}\n      {!isLoading && results.length > 0 && (\n        <div className='results'>\n          <h1>Results:</h1>\n          {results.map((result, i) => {\n            return (\n              <div\n                key={result}\n                className={i === highlightIndex ? 'highlight' : ''}\n              >\n                {result}\n              </div>\n            );\n          })}\n        </div>\n      )}\n      {!isLoading && results.length === 0 && 'no results'}\n      {contentToShow && (\n        <div className='contentDialog'>\n          <button onClick={() => setContentToShow(null)}>Back</button>\n          <div className='contentDialogContent'>{contentToShow}</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}